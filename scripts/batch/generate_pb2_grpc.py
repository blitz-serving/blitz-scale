# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import generate_pb2 as generate__pb2


class TextGenerationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Info = channel.unary_unary(
                '/generate.v2.TextGenerationService/Info',
                request_serializer=generate__pb2.InfoRequest.SerializeToString,
                response_deserializer=generate__pb2.InfoResponse.FromString,
                )
        self.ServiceDiscovery = channel.unary_unary(
                '/generate.v2.TextGenerationService/ServiceDiscovery',
                request_serializer=generate__pb2.ServiceDiscoveryRequest.SerializeToString,
                response_deserializer=generate__pb2.ServiceDiscoveryResponse.FromString,
                )
        self.ClearCache = channel.unary_unary(
                '/generate.v2.TextGenerationService/ClearCache',
                request_serializer=generate__pb2.ClearCacheRequest.SerializeToString,
                response_deserializer=generate__pb2.ClearCacheResponse.FromString,
                )
        self.FilterBatch = channel.unary_unary(
                '/generate.v2.TextGenerationService/FilterBatch',
                request_serializer=generate__pb2.FilterBatchRequest.SerializeToString,
                response_deserializer=generate__pb2.FilterBatchResponse.FromString,
                )
        self.Warmup = channel.unary_unary(
                '/generate.v2.TextGenerationService/Warmup',
                request_serializer=generate__pb2.WarmupRequest.SerializeToString,
                response_deserializer=generate__pb2.WarmupResponse.FromString,
                )
        self.Prefill = channel.unary_unary(
                '/generate.v2.TextGenerationService/Prefill',
                request_serializer=generate__pb2.PrefillRequest.SerializeToString,
                response_deserializer=generate__pb2.PrefillResponse.FromString,
                )
        self.Decode = channel.unary_unary(
                '/generate.v2.TextGenerationService/Decode',
                request_serializer=generate__pb2.DecodeRequest.SerializeToString,
                response_deserializer=generate__pb2.DecodeResponse.FromString,
                )
        self.Health = channel.unary_unary(
                '/generate.v2.TextGenerationService/Health',
                request_serializer=generate__pb2.HealthRequest.SerializeToString,
                response_deserializer=generate__pb2.HealthResponse.FromString,
                )
        self.SendParams = channel.unary_unary(
                '/generate.v2.TextGenerationService/SendParams',
                request_serializer=generate__pb2.SendParamsRequest.SerializeToString,
                response_deserializer=generate__pb2.SendParamsResponse.FromString,
                )
        self.RecvParams = channel.unary_unary(
                '/generate.v2.TextGenerationService/RecvParams',
                request_serializer=generate__pb2.RecvParamsRequest.SerializeToString,
                response_deserializer=generate__pb2.RecvParamsResponse.FromString,
                )
        self.LoadParams = channel.unary_unary(
                '/generate.v2.TextGenerationService/LoadParams',
                request_serializer=generate__pb2.LoadParamsRequest.SerializeToString,
                response_deserializer=generate__pb2.LoadParamsResponse.FromString,
                )
        self.PrefillV2 = channel.unary_unary(
                '/generate.v2.TextGenerationService/PrefillV2',
                request_serializer=generate__pb2.PrefillV2Request.SerializeToString,
                response_deserializer=generate__pb2.PrefillV2Response.FromString,
                )
        self.DecodeV2 = channel.unary_unary(
                '/generate.v2.TextGenerationService/DecodeV2',
                request_serializer=generate__pb2.DecodeV2Request.SerializeToString,
                response_deserializer=generate__pb2.DecodeV2Response.FromString,
                )
        self.ZagPrefill = channel.unary_unary(
                '/generate.v2.TextGenerationService/ZagPrefill',
                request_serializer=generate__pb2.ZagPrefillRequest.SerializeToString,
                response_deserializer=generate__pb2.PrefillV2Response.FromString,
                )
        self.Migrate = channel.unary_unary(
                '/generate.v2.TextGenerationService/Migrate',
                request_serializer=generate__pb2.MigrateRequest.SerializeToString,
                response_deserializer=generate__pb2.MigrateResponse.FromString,
                )
        self.Immigrate = channel.unary_unary(
                '/generate.v2.TextGenerationService/Immigrate',
                request_serializer=generate__pb2.ImmigrateRequest.SerializeToString,
                response_deserializer=generate__pb2.ImmigrateResponse.FromString,
                )
        self.MigratePartial = channel.unary_unary(
                '/generate.v2.TextGenerationService/MigratePartial',
                request_serializer=generate__pb2.MigratePartialRequest.SerializeToString,
                response_deserializer=generate__pb2.MigrateResponse.FromString,
                )
        self.ImmigratePartial = channel.unary_unary(
                '/generate.v2.TextGenerationService/ImmigratePartial',
                request_serializer=generate__pb2.ImmigratePartialRequest.SerializeToString,
                response_deserializer=generate__pb2.ImmigrateResponse.FromString,
                )
        self.WaitRdmaDone = channel.unary_unary(
                '/generate.v2.TextGenerationService/WaitRdmaDone',
                request_serializer=generate__pb2.WaitRdmaDoneRequest.SerializeToString,
                response_deserializer=generate__pb2.WaitRdmaDoneResponse.FromString,
                )
        self.ResetStatus = channel.unary_unary(
                '/generate.v2.TextGenerationService/ResetStatus',
                request_serializer=generate__pb2.ResetStatusRequest.SerializeToString,
                response_deserializer=generate__pb2.ResetStatusResponse.FromString,
                )
        self.SetStatusReady = channel.unary_unary(
                '/generate.v2.TextGenerationService/SetStatusReady',
                request_serializer=generate__pb2.SetStatusReadyRequest.SerializeToString,
                response_deserializer=generate__pb2.SetStatusReadyResponse.FromString,
                )
        self.Relay = channel.unary_unary(
                '/generate.v2.TextGenerationService/Relay',
                request_serializer=generate__pb2.RelayRequest.SerializeToString,
                response_deserializer=generate__pb2.RelayResponse.FromString,
                )
        self.NvlBroadcast = channel.unary_unary(
                '/generate.v2.TextGenerationService/NvlBroadcast',
                request_serializer=generate__pb2.BroadcastRequest.SerializeToString,
                response_deserializer=generate__pb2.BroadcastResponse.FromString,
                )
        self.RdmaBroadcast = channel.unary_unary(
                '/generate.v2.TextGenerationService/RdmaBroadcast',
                request_serializer=generate__pb2.BroadcastRequest.SerializeToString,
                response_deserializer=generate__pb2.BroadcastResponse.FromString,
                )
        self.TanzBroadcast = channel.unary_unary(
                '/generate.v2.TextGenerationService/TanzBroadcast',
                request_serializer=generate__pb2.BroadcastRequest.SerializeToString,
                response_deserializer=generate__pb2.BroadcastResponse.FromString,
                )


class TextGenerationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Info(self, request, context):
        """Model Info
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServiceDiscovery(self, request, context):
        """Service discovery
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearCache(self, request, context):
        """Empties batch cache
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FilterBatch(self, request, context):
        """Remove requests from a cached batch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Warmup(self, request, context):
        """Warmup the model and compute max cache size
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Prefill(self, request, context):
        """Prefill batch and decode first token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Decode(self, request, context):
        """Decode token for a list of prefilled batches
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Health(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendParams(self, request, context):
        """Send parameters to dst rank
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecvParams(self, request, context):
        """Receive parameters from src rank
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadParams(self, request, context):
        """Load params from host memory to device memory
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrefillV2(self, request, context):
        """Prefill batch for some layers and respond number of forwarded layers and
        call NCCL send/recv
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecodeV2(self, request, context):
        """Decode token for a list of prefilled batches
        RPC caller's responsible to garantee List[CachedBatches] are concatenable
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZagPrefill(self, request, context):
        """Prefill batch through zigzag_scheduler
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Migrate(self, request, context):
        """RPC for send migration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Immigrate(self, request, context):
        """RPC for recv migration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MigratePartial(self, request, context):
        """RPC for send migration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImmigratePartial(self, request, context):
        """RPC for recv migration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitRdmaDone(self, request, context):
        """Send parameters, invoke NCCL primitives
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetStatus(self, request, context):
        """Clear TFM_LAYER_CNT when replica turns into INACTIVE
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetStatusReady(self, request, context):
        """Set status to READY. Used to mock the status of the model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Relay(self, request, context):
        """Relay request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NvlBroadcast(self, request, context):
        """Broadcast params through NVLink
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RdmaBroadcast(self, request, context):
        """Broadcast params through RDMA
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TanzBroadcast(self, request, context):
        """Broadcast params in a Waltz Tanz fashion
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextGenerationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Info': grpc.unary_unary_rpc_method_handler(
                    servicer.Info,
                    request_deserializer=generate__pb2.InfoRequest.FromString,
                    response_serializer=generate__pb2.InfoResponse.SerializeToString,
            ),
            'ServiceDiscovery': grpc.unary_unary_rpc_method_handler(
                    servicer.ServiceDiscovery,
                    request_deserializer=generate__pb2.ServiceDiscoveryRequest.FromString,
                    response_serializer=generate__pb2.ServiceDiscoveryResponse.SerializeToString,
            ),
            'ClearCache': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearCache,
                    request_deserializer=generate__pb2.ClearCacheRequest.FromString,
                    response_serializer=generate__pb2.ClearCacheResponse.SerializeToString,
            ),
            'FilterBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.FilterBatch,
                    request_deserializer=generate__pb2.FilterBatchRequest.FromString,
                    response_serializer=generate__pb2.FilterBatchResponse.SerializeToString,
            ),
            'Warmup': grpc.unary_unary_rpc_method_handler(
                    servicer.Warmup,
                    request_deserializer=generate__pb2.WarmupRequest.FromString,
                    response_serializer=generate__pb2.WarmupResponse.SerializeToString,
            ),
            'Prefill': grpc.unary_unary_rpc_method_handler(
                    servicer.Prefill,
                    request_deserializer=generate__pb2.PrefillRequest.FromString,
                    response_serializer=generate__pb2.PrefillResponse.SerializeToString,
            ),
            'Decode': grpc.unary_unary_rpc_method_handler(
                    servicer.Decode,
                    request_deserializer=generate__pb2.DecodeRequest.FromString,
                    response_serializer=generate__pb2.DecodeResponse.SerializeToString,
            ),
            'Health': grpc.unary_unary_rpc_method_handler(
                    servicer.Health,
                    request_deserializer=generate__pb2.HealthRequest.FromString,
                    response_serializer=generate__pb2.HealthResponse.SerializeToString,
            ),
            'SendParams': grpc.unary_unary_rpc_method_handler(
                    servicer.SendParams,
                    request_deserializer=generate__pb2.SendParamsRequest.FromString,
                    response_serializer=generate__pb2.SendParamsResponse.SerializeToString,
            ),
            'RecvParams': grpc.unary_unary_rpc_method_handler(
                    servicer.RecvParams,
                    request_deserializer=generate__pb2.RecvParamsRequest.FromString,
                    response_serializer=generate__pb2.RecvParamsResponse.SerializeToString,
            ),
            'LoadParams': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadParams,
                    request_deserializer=generate__pb2.LoadParamsRequest.FromString,
                    response_serializer=generate__pb2.LoadParamsResponse.SerializeToString,
            ),
            'PrefillV2': grpc.unary_unary_rpc_method_handler(
                    servicer.PrefillV2,
                    request_deserializer=generate__pb2.PrefillV2Request.FromString,
                    response_serializer=generate__pb2.PrefillV2Response.SerializeToString,
            ),
            'DecodeV2': grpc.unary_unary_rpc_method_handler(
                    servicer.DecodeV2,
                    request_deserializer=generate__pb2.DecodeV2Request.FromString,
                    response_serializer=generate__pb2.DecodeV2Response.SerializeToString,
            ),
            'ZagPrefill': grpc.unary_unary_rpc_method_handler(
                    servicer.ZagPrefill,
                    request_deserializer=generate__pb2.ZagPrefillRequest.FromString,
                    response_serializer=generate__pb2.PrefillV2Response.SerializeToString,
            ),
            'Migrate': grpc.unary_unary_rpc_method_handler(
                    servicer.Migrate,
                    request_deserializer=generate__pb2.MigrateRequest.FromString,
                    response_serializer=generate__pb2.MigrateResponse.SerializeToString,
            ),
            'Immigrate': grpc.unary_unary_rpc_method_handler(
                    servicer.Immigrate,
                    request_deserializer=generate__pb2.ImmigrateRequest.FromString,
                    response_serializer=generate__pb2.ImmigrateResponse.SerializeToString,
            ),
            'MigratePartial': grpc.unary_unary_rpc_method_handler(
                    servicer.MigratePartial,
                    request_deserializer=generate__pb2.MigratePartialRequest.FromString,
                    response_serializer=generate__pb2.MigrateResponse.SerializeToString,
            ),
            'ImmigratePartial': grpc.unary_unary_rpc_method_handler(
                    servicer.ImmigratePartial,
                    request_deserializer=generate__pb2.ImmigratePartialRequest.FromString,
                    response_serializer=generate__pb2.ImmigrateResponse.SerializeToString,
            ),
            'WaitRdmaDone': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitRdmaDone,
                    request_deserializer=generate__pb2.WaitRdmaDoneRequest.FromString,
                    response_serializer=generate__pb2.WaitRdmaDoneResponse.SerializeToString,
            ),
            'ResetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetStatus,
                    request_deserializer=generate__pb2.ResetStatusRequest.FromString,
                    response_serializer=generate__pb2.ResetStatusResponse.SerializeToString,
            ),
            'SetStatusReady': grpc.unary_unary_rpc_method_handler(
                    servicer.SetStatusReady,
                    request_deserializer=generate__pb2.SetStatusReadyRequest.FromString,
                    response_serializer=generate__pb2.SetStatusReadyResponse.SerializeToString,
            ),
            'Relay': grpc.unary_unary_rpc_method_handler(
                    servicer.Relay,
                    request_deserializer=generate__pb2.RelayRequest.FromString,
                    response_serializer=generate__pb2.RelayResponse.SerializeToString,
            ),
            'NvlBroadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.NvlBroadcast,
                    request_deserializer=generate__pb2.BroadcastRequest.FromString,
                    response_serializer=generate__pb2.BroadcastResponse.SerializeToString,
            ),
            'RdmaBroadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.RdmaBroadcast,
                    request_deserializer=generate__pb2.BroadcastRequest.FromString,
                    response_serializer=generate__pb2.BroadcastResponse.SerializeToString,
            ),
            'TanzBroadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.TanzBroadcast,
                    request_deserializer=generate__pb2.BroadcastRequest.FromString,
                    response_serializer=generate__pb2.BroadcastResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'generate.v2.TextGenerationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TextGenerationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/Info',
            generate__pb2.InfoRequest.SerializeToString,
            generate__pb2.InfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServiceDiscovery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/ServiceDiscovery',
            generate__pb2.ServiceDiscoveryRequest.SerializeToString,
            generate__pb2.ServiceDiscoveryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/ClearCache',
            generate__pb2.ClearCacheRequest.SerializeToString,
            generate__pb2.ClearCacheResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FilterBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/FilterBatch',
            generate__pb2.FilterBatchRequest.SerializeToString,
            generate__pb2.FilterBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Warmup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/Warmup',
            generate__pb2.WarmupRequest.SerializeToString,
            generate__pb2.WarmupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Prefill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/Prefill',
            generate__pb2.PrefillRequest.SerializeToString,
            generate__pb2.PrefillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Decode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/Decode',
            generate__pb2.DecodeRequest.SerializeToString,
            generate__pb2.DecodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Health(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/Health',
            generate__pb2.HealthRequest.SerializeToString,
            generate__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/SendParams',
            generate__pb2.SendParamsRequest.SerializeToString,
            generate__pb2.SendParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecvParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/RecvParams',
            generate__pb2.RecvParamsRequest.SerializeToString,
            generate__pb2.RecvParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/LoadParams',
            generate__pb2.LoadParamsRequest.SerializeToString,
            generate__pb2.LoadParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PrefillV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/PrefillV2',
            generate__pb2.PrefillV2Request.SerializeToString,
            generate__pb2.PrefillV2Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecodeV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/DecodeV2',
            generate__pb2.DecodeV2Request.SerializeToString,
            generate__pb2.DecodeV2Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZagPrefill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/ZagPrefill',
            generate__pb2.ZagPrefillRequest.SerializeToString,
            generate__pb2.PrefillV2Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Migrate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/Migrate',
            generate__pb2.MigrateRequest.SerializeToString,
            generate__pb2.MigrateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Immigrate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/Immigrate',
            generate__pb2.ImmigrateRequest.SerializeToString,
            generate__pb2.ImmigrateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MigratePartial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/MigratePartial',
            generate__pb2.MigratePartialRequest.SerializeToString,
            generate__pb2.MigrateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImmigratePartial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/ImmigratePartial',
            generate__pb2.ImmigratePartialRequest.SerializeToString,
            generate__pb2.ImmigrateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitRdmaDone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/WaitRdmaDone',
            generate__pb2.WaitRdmaDoneRequest.SerializeToString,
            generate__pb2.WaitRdmaDoneResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/ResetStatus',
            generate__pb2.ResetStatusRequest.SerializeToString,
            generate__pb2.ResetStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetStatusReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/SetStatusReady',
            generate__pb2.SetStatusReadyRequest.SerializeToString,
            generate__pb2.SetStatusReadyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Relay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/Relay',
            generate__pb2.RelayRequest.SerializeToString,
            generate__pb2.RelayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NvlBroadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/NvlBroadcast',
            generate__pb2.BroadcastRequest.SerializeToString,
            generate__pb2.BroadcastResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RdmaBroadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/RdmaBroadcast',
            generate__pb2.BroadcastRequest.SerializeToString,
            generate__pb2.BroadcastResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TanzBroadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/TanzBroadcast',
            generate__pb2.BroadcastRequest.SerializeToString,
            generate__pb2.BroadcastResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
